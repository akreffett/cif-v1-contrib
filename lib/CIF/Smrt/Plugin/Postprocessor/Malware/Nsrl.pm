package CIF::Smrt::Plugin::Postprocessor::Malware::Nsrl;
use base qw(CIF::Smrt::Plugin::Postprocessor::Malware Class::DBI);

use strict;
use warnings;

use CIF qw/generate_uuid_random/;
use Iodef::Pb::Simple ':all';

use constant NSRL_COLUMNS => qw/filename filesize productvendor productname productversion osvendor ossystemname ossystemversion/;

__PACKAGE__->table('vfiles');
__PACKAGE__->columns(Primary => qw/sha1 md5 crc32 filename filesize productvendor productname productversion osvendor opsystemname opsystemversion/);

sub process {
    my $class = shift;
    my $smrt = shift;
    my $data = shift;

    my $dbhost = $smrt->get_config->{nsrl_host};
    my $dbname = $smrt->get_config->{nsrl_db};
    my $dbuser = $smrt->get_config->{nsrl_user} || 'postgres';
    my $dbpass = $smrt->get_config->{nsrl_pw} || '';

    return unless($dbhost and $dbname);

    unless($class->db_names) {
        my $dbi = 'DBI:Pg:database='.$dbname.';host='.$dbhost;
        $class->connection($dbi,$dbuser,$dbpass);
    }

    my @new_ids;
    foreach my $i (@{$data->get_Incident()}) {
        my $restriction = $i->get_restriction();
        my $assessment = $i->get_Assessment();

        my $confidence = @{$assessment}[0]->get_Confidence();
        $confidence = $confidence->get_content();
        $confidence = $class->degrade_confidence($confidence);

        my $guid;
        if(my $iad = $i->get_AdditionalData()){
            foreach (@$iad){
                next unless($_->get_meaning() =~ /^guid/);
                $guid = $_->get_content();
            }
        }

        my $altids = $i->get_RelatedActivity();
        $altids = $altids->get_IncidentID() if($altids);

        my $malware = iodef_malware($i);
        foreach my $m (@$malware) {
            my $hash = $m->get_content();
            
            my $type;
            $type = 'sha1' if ($hash =~ /^[0-9a-fA-F]{40}$/);
            $type = 'md5' if ($hash =~ /^[0-9a-fA-F]{32}$/);

            my @records;
            @records = $class->search($type => uc $hash);

            foreach my $record (@records) {
                my $desc = join(' ', map { $record->get($_) || '' } NSRL_COLUMNS);
                my $id = IncidentIDType->new({
                    content     => generate_uuid_random(),
                    instance    => $smrt->get_instance(),
                    name        => 'nsrl',
                    restriction => $restriction,
                });
                my $new = Iodef::Pb::Simple->new({
                    hash            => $hash,
                    IncidentID      => $id,
                    assessment      => 'known hash',
                    description     => $desc,
                    confidence      => 95,
                    restriction     => $restriction,
                    Contact         => $i->get_Contact(),
                    guid            => $guid,
                    alternativeid               => 'http://www.nsrl.nist.gov',
                    alternativeid_restriction   => 'public',
                });
                push(@new_ids,@{$new->get_Incident()}[0]);
                push(@$altids, $id);
            }
        }
        if($altids){
            $i->set_RelatedActivity(
                RelatedActivityType->new({
                    IncidentID  => $altids,
                })
            );
        }
    }
    return (\@new_ids);
}

1;
